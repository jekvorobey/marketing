variables:
  REGISTRY: registry.ibt.ru:5050
  CONTAINER_IMAGE: $REGISTRY/$CI_PROJECT_ROOT_NAMESPACE/$CI_PROJECT_NAME
  CONTAINER_IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
  DEV_SERVER: 77.223.118.180
  DEV_DOMAIN: NONE
  PROD_SERVER: 212.41.26.51
  PROD_DOMAIN: NONE

.main_deploy_settings: &main_deploy_settings
  stage: deploy
  image: alpine:latest
  variables:
    ANSIBLE_HOST_KEY_CHECKING: "False"
  before_script:
    - apk update && apk add openssh-client
    - mkdir -p ~/.ssh/
    - cat $SSH_CONFIG > ~/.ssh/config
    - cat $SSH_RSA > ~/.ssh/id_rsa
    - chmod -R 0400 ~/.ssh; chmod 0600 ~/.ssh/*
  after_script:
    - export TARGET_HOST=$(cat TARGET_HOST)
    - export ENV=$(cat TARGET_ENV)
    - export LOCAL_PATH="/home/"$CI_PROJECT_ROOT_NAMESPACE"/"$ENV"/svc/"$CI_PROJECT_NAME
    - export CONTAINER_IMAGE=$(echo $CONTAINER_IMAGE | tr '[:upper:]' '[:lower:]')

    - echo "deploy to $TARGET_HOST"
    - echo "$CONTAINER_IMAGE:$CONTAINER_IMAGE_TAG @ $LOCAL_PATH"
    - ssh -o StrictHostKeyChecking=no root@$TARGET_HOST "mkdir -p $LOCAL_PATH/"
    - sed -r "s|(image:.).*:.*|\1$CONTAINER_IMAGE:$CONTAINER_IMAGE_TAG|;s|ENV|$ENV|g" -i docker-compose.yml
    - scp -o StrictHostKeyChecking=no docker-compose.yml root@$TARGET_HOST:$LOCAL_PATH/docker-compose.yml
    - ssh -o StrictHostKeyChecking=no root@$TARGET_HOST "cd $LOCAL_PATH; docker-compose -f ../../../docker-compose.yml -f docker-compose.yml up -d; docker exec ibt-ingress nginx -s reload"

stages:
  - test
  - build
  - deploy

#Test stages
Unit:
  stage: test
  image:
    name: docker
  script:
    - echo test
  artifacts:
    reports:
      junit: report.xml

Coverage:
  stage: test
  image:
    name: docker
  script:
    - echo test

# Build stages
Build:
  stage: build
  image: docker:stable
  script:
    - apk update && apk add openssh-client
    - mkdir -p .ssh
    - cat $SSH_CONFIG > .ssh/config
    - cat $SSH_RSA > .ssh/id_rsa
    - chmod -R 0400 .ssh; chmod 0600 .ssh/*
    - export CONTAINER_IMAGE=$(echo $CONTAINER_IMAGE | tr '[:upper:]' '[:lower:]')
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS  $REGISTRY
    - docker pull $CONTAINER_IMAGE:latest || true
    - docker build --cache-from $CONTAINER_IMAGE:latest -t $CONTAINER_IMAGE:latest -t $CONTAINER_IMAGE:$CONTAINER_IMAGE_TAG .
    - docker build -t $CONTAINER_IMAGE:latest -t $CONTAINER_IMAGE:$CONTAINER_IMAGE_TAG .
    - docker image push $CONTAINER_IMAGE:$CONTAINER_IMAGE_TAG
    - docker image push $CONTAINER_IMAGE:latest

Stage:
  <<: *main_deploy_settings
  environment:
    name: stage
  script:
    - echo $DEV_SERVER > TARGET_HOST
    - echo "stage" > TARGET_ENV
  when: manual

Production:
  <<: *main_deploy_settings
  environment:
    name: production
  script:
    - echo $PROD_SERVER > TARGET_HOST
    - echo "prod" > TARGET_ENV
  when: manual
